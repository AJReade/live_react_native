import { ReactNode } from 'react';

// LiveView Connection Types
export interface LiveViewOptions {
  url: string;
  path?: string;
  params?: Record<string, any>;
  connect?: boolean;
  reconnectOnError?: boolean;
  reconnectDelay?: (tries: number) => number;
  maxReconnectAttempts?: number;
}

// LiveView Channel Join/Leave Options
export interface LiveViewJoinOptions {
  onJoin?: (response: any) => void;
  onError?: (error: any) => void;
  onTimeout?: () => void;
}

export interface LiveViewLeaveOptions {
  onLeave?: () => void;
}

// Event Push Options
export interface PushEventOptions {
  onSuccess?: (response: any) => void;
  onError?: (error: any) => void;
  onTimeout?: () => void;
}

// Connection State
export interface ConnectionState {
  connected: boolean;
  connecting: boolean;
  error: Error | null;
  reconnectAttempt: number;
}

// LiveView Assigns Update (from backend)
export interface LiveViewAssignsUpdate {
  assigns: Record<string, any>;
  changed: boolean;
}

export interface LiveViewState {
  assigns: Record<string, any>;
  connected: boolean;
  connecting: boolean;
  error?: string;
  reconnectAttempt: number;
}

// Event Handling Types
export type PushEventFunction = (
  event: string,
  payload?: Record<string, any>,
  target?: string
) => void;

export type HandleEventFunction = (
  event: string,
  callback: (payload: any) => void
) => () => void; // Returns cleanup function

export type UploadFunction = (
  name: string,
  files: File[],
  options?: UploadOptions
) => void;

// Component Types
export interface LiveComponentProps {
  name: string;
  assigns?: Record<string, any>;
  children?: ReactNode;
  [key: string]: any;
}

export interface ComponentRegistryEntry {
  component: React.ComponentType<any>;
  displayName?: string;
}

// Upload Types
export interface UploadOptions {
  onProgress?: (progress: number) => void;
  onComplete?: (response: any) => void;
  onError?: (error: string) => void;
}

export interface UploadEntry {
  name: string;
  progress: number;
  error?: string;
  completed: boolean;
}

// Channel Types
export interface ChannelMessage {
  event: string;
  payload: any;
  ref?: string;
}

export interface LiveViewMessage {
  type: 'mount' | 'update' | 'event' | 'upload';
  assigns?: Record<string, any>;
  event?: string;
  payload?: any;
}

// Context Types
export interface LiveContextValue {
  state: LiveViewState;
  pushEvent: PushEventFunction;
  pushEventTo: PushEventFunction;
  handleEvent: HandleEventFunction;
  removeHandleEvent: (event: string) => void;
  upload: UploadFunction;
  uploadTo: UploadFunction;
}

// Hook Return Types
export interface UseLiveViewReturn extends LiveContextValue {
  connect: () => void;
  disconnect: () => void;
  reconnect: () => void;
}